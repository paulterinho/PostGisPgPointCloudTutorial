# docker-compose.yml
# @see https://stackoverflow.com/questions/26598738/how-to-create-user-database-in-script-for-docker-postgres
version: '3.8'

# You should know that Docker Compose works with services.
# 1 service = 1 container.
# For example, a service, a server, a client, a database...
# We use the keyword 'services' to start to create services.
services:
  postgis:
    build:
      context: .
      dockerfile: ./db/db.Dockerfile
    restart: always
    ports:
      # <Port exposed> : < Port running inside container>
      - '5432:5432'
    expose:
      # Opens port  on the container
      - '5432'
    # networks:
    #   backend-network:
    #     ipv4_address: 172.28.1.1
    env_file:
      - ./db/db.env # configure postgres
    volumes:
      - postgis-data:/var/lib/postgresql/data/ # persist data even if container shuts down

  pgadmin4:
    build:
      context: ./pgadmin
      dockerfile: Dockerfile
    ports:
    - "8889:80"
    # networks:
    #   backend-network:
    #     ipv4_address: 172.28.1.2
    env_file:
      - ./pgadmin/pgadmin.env # configure postgres
    depends_on:
      - postgis

# NETWORKS
# networks:
#   backend-network:
#     ipam:
#       driver: default
#       config:
#         - subnet: 172.28.0.0/16


# VOLUMES # The `volumes` tag allows us to share a folder with our container
# Its syntax is as follows: [folder path on our machine]:[folder path to retrieve in the container]

volumes:
  # In this example, we share the folder `db-data` in our root repository, with the default PostgreSQL data path
  # It means that every time the repository is modifying the data inside
  # of `/var/lib/postgresql/data/`, automatically the change will appear in `db-data`
  # You don't need to create the `db-data` folder. Docker Compose will do it for you
 
  postgis-data: # named volumes can be managed easier using docker-compose
  pgadmin-data: